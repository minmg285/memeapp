{"version":3,"sources":["Memes/styles.module.css","MemeGenerator/styles.module.css","Memes/meme.js","MemeGenerator/memeGenerated.js","App/App.js","serviceWorker.js","index.js"],"names":["module","exports","Meme","useState","memes","setMemes","memeIndex","setMemeIndex","captions","setCaptions","history","useHistory","useEffect","fetch","then","res","json","_memes","data","arr","i","length","j","Math","floor","random","temp","shuffleMemes","Array","box_count","fill","console","log","className","styles","container","onClick","currentMeme","formData","FormData","append","id","forEach","c","index","method","body","push","url","onKeyDown","e","keyCode","generateMemes","generate","skip","map","onChange","text","target","value","updateCaptions","key","src","alt","img","MemeGenerated","clipboard","useClipboard","copied","setCopied","location","useLocation","URLSearchParams","search","get","home","copy","App","exact","path","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.27cebe89.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__20JjR\",\"skip\":\"styles_skip__U3wfX\",\"generate\":\"styles_generate__29LRl\",\"img\":\"styles_img__cSaLl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__1jvmO\",\"copy\":\"styles_copy__2HZa9\",\"home\":\"styles_home__3NK4L\",\"img\":\"styles_img__2Db2Y\"};","import React,{useEffect, useState} from 'react';\r\nimport styles from \"./styles.module.css\";\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nexport const Meme = () =>{\r\n    const [memes,setMemes] = useState([]);\r\n    const [memeIndex,setMemeIndex] = useState(0);\r\n    const [captions, setCaptions] = useState([]);\r\n    const history = useHistory();\r\n    const shuffleMemes = (arr) =>{\r\n        for(let i=arr.length -1; i>0 ; i-- ){\r\n            const j = Math.floor(Math.random()*i);\r\n            const temp = arr[i];\r\n            arr[i] = arr[j];\r\n            arr[j] = temp;\r\n\r\n        }\r\n    }\r\n    const updateCaptions = (e,index) => {\r\n        const text = e.target.value || '';\r\n        setCaptions(\r\n            captions.map((c,i) => {\r\n                if (index === i){\r\n                    return text;\r\n                }else{\r\n                    return c;\r\n                }\r\n            })\r\n\r\n        )\r\n    };\r\n    const generateMemes = () =>{ \r\n        const currentMeme = memes[memeIndex];\r\n        const formData = new FormData();\r\n        formData.append('username','tonymaung01')\r\n        formData.append('password',\"40208313\")\r\n        formData.append('template_id',currentMeme.id);\r\n        captions.forEach((c,index) => formData.append(`boxes[${index}][text]`,c));\r\n        fetch('https://api.imgflip.com/caption_image', {\r\n            method: 'POST',\r\n            body:formData\r\n        }).then(res=>{\r\n            res.json().then(res=> {\r\n                history.push(`/generated?url=${res.data.url}`);\r\n            })\r\n        })\r\n\r\n    }\r\n    useEffect(() => {\r\n        fetch('https://api.imgflip.com/get_memes').then(res=>\r\n            res.json().then(\r\n                res=>{\r\n                    const _memes = res.data.memes;\r\n                    shuffleMemes(_memes);\r\n                    setMemes(_memes)\r\n                }\r\n            ) \r\n        );\r\n    }, []);\r\n    useEffect(()=>{\r\n        if(memes.length){\r\n            setCaptions(Array(memes[memeIndex].box_count).fill(''));\r\n\r\n        }\r\n    }, [memeIndex,memes]);\r\n    useEffect(()=>{\r\n        console.log(captions)\r\n    },[captions]);\r\n    const handleKeyDown = (e) =>{\r\n        if(e.keyCode === 13){\r\n            this.generateMemes();\r\n        }\r\n    }\r\n    return(<div>\r\n\r\n        \r\n        {\r\n            memes.length ? <div className ={styles.container}>\r\n            \r\n            <button onClick={generateMemes} onKeyDown={handleKeyDown} className={styles.generate}>Generate</button>\r\n            <button onClick={()=>setMemeIndex(memeIndex+1)} className={styles.skip}>Skip</button>\r\n            {\r\n                captions.map((c,index) => (\r\n                    <input onChange = {(e)=> updateCaptions(e,index)} key={index}/>\r\n                ))\r\n            }\r\n            <img src={memes[memeIndex].url} alt=\"memes-photo\" className={styles.img}/>\r\n            \r\n        </div> : <></>\r\n        }\r\n    </div>\r\n        \r\n    )\r\n}\r\n\r\n\r\n","import React,{useState} from 'react';\r\nimport {useHistory, useLocation } from 'react-router-dom';\r\nimport styles from \"./styles.module.css\";\r\nimport { useClipboard } from \"use-clipboard-copy\";\r\nexport const MemeGenerated = () =>{\r\n    const clipboard = useClipboard();\r\n    const history = useHistory();\r\n    const [copied,setCopied] = useState(false);\r\n    const location = useLocation();\r\n    const url = new URLSearchParams(location.search).get('url');\r\n    const copyLink = () =>{\r\n        clipboard.copy(url);\r\n        setCopied(true);\r\n    }\r\n  return(\r\n    <div className={styles.container}>\r\n         <button className= {styles.home} onClick={()=> history.push(\"/\")}>Make more Memes</button>\r\n        { url && <img src={url} alt=\"\"/>}\r\n        <button className = {styles.copy} onClick = {copyLink}>\r\n        {\r\n            copied ? \"Link Copied\" : \"Copy Link\"\r\n           \r\n        }\r\n        </button>\r\n       \r\n        \r\n    </div>\r\n    \r\n  )\r\n}","import React from 'react';\nimport {Meme} from '../Memes/meme';\nimport {MemeGenerated} from \"../MemeGenerator/memeGenerated\";\nimport {Switch,Route} from \"react-router-dom\";\n\nexport const App = () =>{\n  return(\n    <div>\n      <h1>Let's Create Memes</h1>\n      <Switch>\n        <Route exact path= '/'>\n          <Meme/>\n        </Route>\n        <Route path=\"/generated\">\n          <MemeGenerated/>\n        </Route>\n      </Switch>\n    </div>\n    \n  )\n}\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App/App';\nimport { BrowserRouter } from \"react-router-dom\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n    \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}